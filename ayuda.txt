docker run -d -p 6379:6379 -e REDIS_PASSWORD=Aforo255#2019 --name database-redis redis --requirepass Aforo255#2019

//Manejo de Trazas Distribuidas
docker pull jaegertracing/all-in-one:latest

//Brinda metricas
docker pull prom/prometheus:v2.31.1

docker pull grafana/grafana:8.2.3

docker pull datalust/seq:2021.3

docker run -d --name service-tracer -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 -p 9411:9411 --network micro jaegertracing/all-in-one:latest

docker run -p 9090:9090 --name service-metrics --network micro -v [Ruta de ubicacion de archivo prometheus]:/etc/prometheus/prometheus.yml -d prom/prometheus:v2.31.1

docker run -p 9090:9090 --name service-metrics --network micro -v D:/GitDach092/base-microservice-NET/Scripts/Metrics/local/prometheus.yml:/etc/prometheus/prometheus.yml -d prom/prometheus:v2.31.1

docker run -p 3000:3000 --name service-analytics --network micro -d grafana/grafana:8.2.3

docker run -e ACCEPT_EULA=Y --name service-log -p 5341:80 -d datalust/seq:2021.3

OpenTracing.Contrib.NetCore => permite recolectar toda la informacion de diagnostico desde de la aplicacion .NET


Grafana:

	- Contrase√±a y Password: admin

--------------------------------------------------------------------------------------------------------------------

Creando el DockerFile y ejecutandolo y subiendo a DockerHub 

A nivel de container dentro del appsettings se referencia al nombre del contenedor 

Primer Comando a lanzar:  dotnet publish -c Release --output ./publish

Segundo Comando: docker build -t dach0902/img-security .  Cuando se pone "." se da a entender que el DockerFile esta en la mismo nivel 

Loguearse al DockerHub: docker login 

Subiendo imagen a DockerHub: docker push dach092/img-security

Corriendo un contenedor: docker-compose -f .\docker-compose-app.yml up -d

Notas: los cambios en el appsetting donde hay localhost reemplazar por los nombres del contenedor cuando el appsetting es docker 

--------------------------------------------------------------------------------------------------------------------

Ejecutando Docker en Ubuntu




--------------------------------------------------------------------------------------------------------------------

Descargue MobaXterm

Configurando una maquina virtual en Azure y configurar Ubuntu

DOCKER
======


https://docs.docker.com/engine/install/ubuntu/

Comandos

sudo apt-get update

sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

sudo docker run hello-world

sudo usermod -aG docker dach092



DOCKER-COMPOSE
==============

https://www.digitalocean.com/community/tutorials/como-instalar-docker-compose-en-ubuntu-18-04-es

Comandos

sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version



NET CORE
========


https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#1804-

Comandos

wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb

sudo dpkg -i packages-microsoft-prod.deb



sudo apt-get update; \
  sudo apt-get install -y apt-transport-https && \
  sudo apt-get update && \
  sudo apt-get install -y dotnet-sdk-5.0





































